// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['views/base/view', 'text!templates/todo.hbs'], function(View, template) {
  'use strict';
  var TodoView, _ref;
  return TodoView = (function(_super) {
    __extends(TodoView, _super);

    function TodoView() {
      this.save = __bind(this.save, this);
      this.edit = __bind(this.edit, this);
      this.toggle = __bind(this.toggle, this);
      this.destroy = __bind(this.destroy, this);
      this.render = __bind(this.render, this);
      _ref = TodoView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TodoView.prototype.template = template;

    TodoView.prototype.tagName = 'li';

    TodoView.prototype.initialize = function() {
      TodoView.__super__.initialize.apply(this, arguments);
      this.listenTo(this.model, 'change', this.render);
      this.delegate('click', '.destroy', this.destroy);
      this.delegate('dblclick', 'label', this.edit);
      this.delegate('keypress', '.edit', this.save);
      this.delegate('click', '.toggle', this.toggle);
      return this.delegate('blur', '.edit', this.save);
    };

    TodoView.prototype.render = function() {
      var className;
      TodoView.__super__.render.apply(this, arguments);
      this.$el.removeClass('active completed');
      className = this.model.get('completed') ? 'completed' : 'active';
      return this.$el.addClass(className);
    };

    TodoView.prototype.destroy = function() {
      return this.model.destroy();
    };

    TodoView.prototype.toggle = function() {
      return this.model.toggle().save();
    };

    TodoView.prototype.edit = function() {
      this.$el.addClass('editing');
      return this.$('.edit').focus();
    };

    TodoView.prototype.save = function(event) {
      var ENTER_KEY, title;
      ENTER_KEY = 13;
      title = $(event.currentTarget).val().trim();
      if (!title) {
        return this.model.destroy();
      }
      if (event.type === 'keypress' && event.keyCode !== ENTER_KEY) {
        return;
      }
      this.model.save({
        title: title
      });
      return this.$el.removeClass('editing');
    };

    return TodoView;

  })(View);
});
